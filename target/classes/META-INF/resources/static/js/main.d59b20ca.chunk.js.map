{"version":3,"sources":["logo.svg","App.js","components/MyComponent.js","serviceWorker.js","components/MyGetComponent.js","components/contract.js","components/MyGetContract.js","index.js"],"names":["App","Component","Boolean","window","location","hostname","match","MyGetContract","props","state","posts","errorMsg","axios","get","then","response","console","log","setState","data","catch","error","this","length","map","post","name","id","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAAe,I,MCwBAA,I,mECrBWC,YCSNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBuBL,Y,MCCNA,Y,ICwCRM,E,kDAxCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACRC,MAAO,GACPC,SAAU,IALA,E,gEAQC,IAAD,OACfC,IAAMC,IAAI,kCACTC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACR,MAAOK,EAASI,UAElCC,OAAM,SAAAC,GACHL,QAAQC,IAAII,GACZ,EAAKH,SAAS,CAACP,SAAU,mB,+BAKvB,IAAD,EACoBW,KAAKb,MAAvBC,EADF,EACEA,MAAMC,EADR,EACQA,SACb,OACI,gDAGID,EAAMa,OACNb,EAAMc,KAAI,SAAAC,GAAI,OAAI,8BAAsBA,EAAKC,MAAfD,EAAKE,OACnC,KAGIhB,EAAW,8BAAMA,IAAgB,Y,GAjCzBV,aCQ5B2B,IAASC,OACL,cAAC,IAAD,UAEI,cAAC,EAAD,MAEJC,SAASC,eAAe,SJkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.d59b20ca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload 123.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import '../css/MyComponent.css'\r\nimport React, { Component } from 'react'\r\nimport axios from 'axios'\r\nclass MyComponent extends Component {\r\n  \r\n  constructor() {\r\n    super();\r\n    this.state = { name: '',\r\n    department:'',\r\n    street:'',\r\n    postalcode:'',\r\n    state:'',\r\n    country:'' };\r\n      \r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n  }\r\n\r\n  Changehandler = (event) =>{\r\n    this.setState({[event.target.name]:event.target.value})\r\n  }\r\n  //String name, String department, String street, int postalcode, String state, String country\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    axios.put('http://localhost:8080/company',this.state)\r\n    .then(response => {\r\n      console.log(response)\r\n      //this.setState({posts: response.data})\r\n  })\r\n  .catch(error => {\r\n      console.log(error)\r\n     // this.setState({errorMsg: 'Keine Daten erhalten'})\r\n  })\r\n\r\n  }\r\n\r\n  render() {\r\n    const{name,department,street,postalcode,state,country} = this.state\r\n    //oder value = {this.state.name}\r\n    return (\r\n      <div className=\"form-group col-md- col-sm-4 col-xs-20\">//user-form\r\n        <form id=\"test\"  onSubmit={this.handleSubmit}>\r\n          <div >\r\n            <div className=\".form-group\">\r\n              <label>\r\n                Name\r\n            </label>\r\n              <input\r\n                placeholder=\"Name\"\r\n                name=\"name\"\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                value={name} onChange={this.Changehandler} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>\r\n              Department\r\n            </label>\r\n              <input\r\n                placeholder=\"Department\"\r\n                name=\"department\"\r\n                type=\"text\"\r\n                value={department} onChange={this.Changehandler} />\r\n            </div>\r\n            <div className=\"user-input\">\r\n              <label>\r\n              Street\r\n            </label>\r\n              <input\r\n                placeholder=\"Street\"\r\n                name=\"street\"\r\n                type=\"text\"\r\n                value={street} onChange={this.Changehandler} />\r\n            </div>\r\n            <div className=\"user-input\">\r\n              <label>\r\n              Postalcode\r\n            </label>\r\n              <input\r\n                placeholder=\"Postalcode\"\r\n                name=\"postalcode\"\r\n                type=\"number\"\r\n                value={postalcode} onChange={this.Changehandler} />\r\n            </div>\r\n            <div className=\"user-input\">\r\n              <label>\r\n              State\r\n            </label>\r\n              <input\r\n                placeholder=\"State\"\r\n                name=\"state\"\r\n                type=\"text\"\r\n                value={state} onChange={this.Changehandler} />\r\n            </div>\r\n            <div className=\"user-input\">\r\n              <label>\r\n              Country\r\n            </label>\r\n              <input\r\n                placeholder=\"Country\"\r\n                name=\"country\"\r\n                type=\"text\"\r\n                value={country} onChange={this.Changehandler} />\r\n            </div>\r\n\r\n            <div> <input type=\"submit\" className=\"btn btn-dark btn-lg btn-block\" value=\"Submit\"/></div>\r\n          </div>\r\n\r\n\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default MyComponent;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nclass MyGetComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             posts: [],\r\n             errorMsg: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        axios.get('http://localhost:8080/company')\r\n        .then(response => {\r\n            console.log(response)\r\n            this.setState({posts: response.data})\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            this.setState({errorMsg: 'Keine Daten erhalten'})\r\n        })\r\n\r\n    }\r\n    \r\n    render() {\r\n        const {posts,errorMsg} = this.state\r\n        return (\r\n            <div>\r\n                List of Posts\r\n                {\r\n                posts.length ? \r\n                posts.map(post => <div key = {post.id}>{post.name}</div>):\r\n                null\r\n                }\r\n                {\r\n                    errorMsg ? <div>{errorMsg}</div>:null\r\n                }\r\n            </div>\r\n          \r\n        )\r\n    }\r\n}\r\n\r\nexport default MyGetComponent\r\n","import '../css/Contract.css'\r\nimport React, { Component } from 'react'\r\nimport axios from 'axios'\r\nclass contract extends Component {\r\n  \r\n  // fehlt noch features oder ip numbers`??\r\n  constructor() { \r\n    super();\r\n    this.state = { startDate: '',\r\n    endDate:'',\r\n    version:'',\r\n    licenskey:''\r\n \t };\r\n      \r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n  }\r\n\r\n  Changehandler = (event) =>{\r\n    this.setState({[event.target.name]:event.target.value})\r\n  }\r\n  //String startDate, String endDate, String version, String licenskey\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    axios.put('http://localhost:8080/contract',this.state)\r\n    .then(response => {\r\n      console.log(response)\r\n      //this.setState({posts: response.data})\r\n  })\r\n  .catch(error => {\r\n      console.log(error)\r\n     // this.setState({errorMsg: 'erhalten'})\r\n  })\r\n\r\n  }\r\n\r\n  render() {\r\n    const{startDate,  endDate,  version,  licenskey} = this.state\r\n    //oder value = {this.state.name}\r\n    return (\r\n      <div className=\"form-container\">\r\n        <form id=\"test\"  onSubmit={this.handleSubmit}>\r\n          <div >\r\n            <div className=\"form-container\">\r\n              <label>\r\n                startDate\r\n            </label>\r\n              <input\r\n                placeholder=\"StartDate\"\r\n                class=\"form-control\"\r\n                name=\"startDate\"\r\n                type=\"text\"\r\n                value={startDate} onChange={this.Changehandler} />\r\n            </div>\r\n            <div className=\"form-container\">\r\n              <label>\r\n              endDate\r\n            </label>\r\n              <input\r\n                placeholder=\"EndDate\"\r\n                class=\"form-control\"\r\n                name=\"endDate\"\r\n                type=\"text\"\r\n                value={endDate} onChange={this.Changehandler} />\r\n            </div>\r\n            <div className=\"form-container\">\r\n              <label>\r\n              version\r\n            </label>\r\n              <input\r\n                placeholder=\"Version\"\r\n                class=\"form-control\"\r\n                name=\"version\"\r\n                type=\"text\"\r\n                value={version} onChange={this.Changehandler} />\r\n            </div>\r\n            <div className=\"form-container\">\r\n              <label>\r\n              licenskey\r\n            </label>\r\n              <input\r\n                placeholder=\"Licenskey\"\r\n                class=\"form-control\"\r\n                name=\"licenskey\"\r\n                type=\"number\"\r\n                value={licenskey} onChange={this.Changehandler} />\r\n            </div>\r\n            \r\n            <div> <input type=\"submit\" value=\"Submit\"/></div>\r\n          </div>\r\n          //<button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\">Sign in</button>\r\n\r\n\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default contract;\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nclass MyGetContract extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             posts: [],\r\n             errorMsg: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        axios.get('http://localhost:8080/contract')\r\n        .then(response => {\r\n            console.log(response)\r\n            this.setState({posts: response.data})\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            this.setState({errorMsg: ' erhalten'})\r\n        })\r\n\r\n    }\r\n    \r\n    render() {\r\n        const {posts,errorMsg} = this.state\r\n        return (\r\n            <div>\r\n                List of Posts\r\n                {\r\n                posts.length ? \r\n                posts.map(post => <div key = {post.id}>{post.name}</div>):\r\n                null\r\n                }\r\n                {\r\n                    errorMsg ? <div>{errorMsg}</div>:null\r\n                }\r\n            </div>\r\n          \r\n        )\r\n    }\r\n}\r\n\r\nexport default MyGetContract\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport MyComponent from \"./components/MyComponent\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport GET from \"./components/MyGetComponent\"\r\nimport contract from \"./components/contract\";\r\nimport GETC from \"./components/MyGetContract\"\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n     \r\n        <GETC/>\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}